package cn.itcast.shop.listener;

import java.util.Timer;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import cn.itcast.shop.service.CategoryService;
import cn.itcast.shop.service.PrivilegeService;
import cn.itcast.shop.service.impl.BaseServiceImpl;
import cn.itcast.shop.util.FileUploadUtil;
import cn.itcast.shop.util.ShopTimerTask;

public class ShopServletContextListener implements ServletContextListener {
	
	private ApplicationContext context=null;
	
	private CategoryService categoryService=null;
	
	private ShopTimerTask shopTimerTask=null;
	
	private FileUploadUtil fileUploadUtil=null;
	
	private PrivilegeService privilegeService=null;
	
	public void contextDestroyed(ServletContextEvent arg0) {
	}

	public void contextInitialized(ServletContextEvent se) {
		// 完成项目启动数据的初始化功能
		// 1: 如果数据量不大,更新不频繁可以存储到app缓存中, 缺点: 需要自己解决同步问题
		// 2: 数据量大,可以考虑使用hibernate二级缓存, hibernate自己提供了同步功能
		// Spring的配置文件,项目启动的时候配置文件读取后也存储到了application内置对象中
		context=WebApplicationContextUtils.getWebApplicationContext(se.getServletContext());
		categoryService=(CategoryService)context.getBean("categoryService");
		fileUploadUtil=(FileUploadUtil) context.getBean("fileUploadUtil");
		privilegeService=(PrivilegeService)context.getBean("privilegeService");
		// 获取所有的类别,并且存储到application内置中
		se.getServletContext().setAttribute("categorys", categoryService.query());
		// 通过Spring配置文件,获取线程任务
		shopTimerTask=(ShopTimerTask)context.getBean("shopTimerTask");
		shopTimerTask.setApplication(se.getServletContext());
		// 设置执行时间
		new Timer(true).schedule(shopTimerTask,0,1000*60*1000);
		
		// 通过路径获取银行图标,并且存储到application内置对象中
		String path=se.getServletContext().getRealPath("/image/logo");
		se.getServletContext().setAttribute("bankImages",fileUploadUtil.bankImage(path));
		
		// 获取所有权限菜单数据,支持树状结构
		se.getServletContext().setAttribute("privileges",privilegeService.getPrivilegeMenu());
		
		// 获取所有的purls
		se.getServletContext().setAttribute("purls", privilegeService.getPrivilegeUrl());
	}


}
